{"version":3,"file":null,"sources":["../src/cleaners/normalise-cleaner.js","../src/cleaners/contractions-cleaner.js","../src/cleaners/salutations-cleaner.js","../src/cleaners/politeness-cleaner.js","../src/parsers/chrono/chrono.js","../src/parsers/time-parser.js","../src/parsers/users-parser.js","../src/parsers/action-parser.js","../src/refiners/confirmations/reminder-confirmation.js","../src/refiners/reminder-refiner.js","../src/refiners/query-refiner.js","../src/intent-parser.js"],"sourcesContent":["export default class NormaliseCleaner {\n  clean(obj = { raw: '' }) {\n    const text = obj.raw\n    // Normalise whitespace to space.\n      .replace(/\\s+/g, ' ')\n      .trim();\n\n    // Let's use the normalised text for the rest of the processing.\n    obj.text = text;\n    obj.cleaned = text;\n\n    return Promise.resolve(obj);\n  }\n}\n","export default class ContractionsCleaner {\n  clean(obj = { cleaned: '' }) {\n    const cleaned = obj.cleaned\n    // Unambiguous cases.\n      .replace(/\\b(let)'s\\b/ig, '$1 us') // Keep the case.\n      .replace(/'s (been|got|gotten)\\b/ig, ' has $1')\n      .replace(/'s (being|going)\\b/ig, ' is $1')\n      .replace(/'d (like|love)\\b/ig, ' would $1')\n\n      // Irregular negations.\n      .replace(/\\b(should)n't've\\b/ig, '$1 not have')\n      .replace(/\\b(would)n't've\\b/ig, '$1 not have')\n      .replace(/\\b(could)n't've\\b/ig, '$1 not have')\n      .replace(/\\b(s)han't\\b/ig, '$1hall not') // Keep the first letter case.\n      .replace(/\\b(w)on't\\b/ig, '$1ill not')\n      .replace(/\\b(c)an't\\b/ig, '$1annot')\n\n      // Regular contractions.\n      .replace(new RegExp('\\\\b(' +\n        'am|are|could|did|do|does|had|has|have|' +\n        'is|might|must|should|was|were|would' +\n        ')n\\'t\\\\b', 'ig'), '$1 not')\n      .replace(/\\b(g)onna\\b/ig, '$1oing to') // Keep the first letter case.\n      .replace(/\\b(w)anna\\b/ig, '$1ant to')\n      .replace(/'ll\\b/ig, ' will')\n      .replace(/'re\\b/ig, ' are')\n      .replace(/'ve\\b/ig, ' have')\n      .replace(/'m\\b/ig, ' am');\n\n    obj.cleaned = cleaned;\n\n    return Promise.resolve(obj);\n  }\n}\n","const PUNCTUATION = {\n  // @see http://www.unicode.org/cldr/charts/29/summary/en.html#4\n  en: '[-‐–—,;:!?.…\\'‘’\"“”()[\\\\]§@*/&#†‡′″]',\n  fr: '[-‐–—,;:!?.…’\"“”«»()[\\\\]§@*/&#†‡]',\n  ja: '[-‾_＿－‐—―〜・･,，、､;；:：!！?？.．‥…。｡＇‘’\"＂“”(（)）\\\\[［\\\\]］{｛}｝' +\n  '〈〉《》「｢」｣『』【】〔〕‖§¶@＠*＊/／\\\\＼&＆#＃%％‰†‡′″〃※]',\n};\n\nexport default class SalutationsCleaner {\n  clean(obj = { cleaned: '' }) {\n    const cleaned = obj.cleaned\n      .replace(new RegExp(`^(?:Hello|Hey|Hi|Yo)${PUNCTUATION.en}* `, 'iu'), '');\n\n    obj.cleaned = cleaned;\n\n    return Promise.resolve(obj);\n  }\n}\n","// @todo Use a POS tagger and reorganise element in questions:\n// * \"Tell me where you are.\" => \"Where are you?\"\nexport default class PolitenessCleaner {\n  clean(obj = { cleaned: '' }) {\n    let cleaned = obj.cleaned\n      .replace(new RegExp('^(?:Can you ' +\n          '|Can you please ' +\n          '|Please can you ' +\n          '|Please ' +\n          '|Please do ' +\n          ')?remind\\\\b', 'i'),\n        'Remind')\n      .replace(new RegExp('^(?:Can you tell me ' +\n          '|Can you please tell me ' +\n          '|Please tell me ' +\n          '|Please do tell me ' +\n          '|Tell me ' +\n          ')?wh(at|ere|en)\\\\b', 'i'),\n        'Wh$1');\n\n    if (cleaned !== obj.cleaned) {\n      if (cleaned.match(/^Remind\\b/i)) {\n        // Remove question mark if it was a question.\n        cleaned = cleaned.replace(/\\?+$/, '.');\n      } else if (cleaned.match(/^Wh(at|ere|en)\\b/i)) {\n        // Add question mark if it is a question.\n        cleaned = cleaned.replace(/\\.+$/, '?');\n      }\n    }\n\n    obj.cleaned = cleaned;\n\n    return Promise.resolve(obj);\n  }\n}\n","import chrono from 'chrono-node';\n\n/**\n * Parse day periods according to CLDR.\n * @see http://www.unicode.org/cldr/charts/29/verify/dates/en.html\n */\nconst dayPeriodsParser = new chrono.Parser();\ndayPeriodsParser.pattern =\n  () => new RegExp('midnight|morning|in the morning|noon|' +\n    'afternoon|in the afternoon|evening|in the evening|night|at night', 'i');\ndayPeriodsParser.extract = (text, ref, match) => {\n  let hour;\n  let meridiem;\n\n  switch (match[0].toLowerCase()) {\n    case 'midnight':\n      hour = 0;\n      meridiem = 0;\n      break;\n    case 'morning':\n    case 'in the morning':\n      hour = 9;\n      meridiem = 0;\n      break;\n    case 'noon':\n      hour = 12;\n      meridiem = 1;\n      break;\n    case 'afternoon':\n    case 'in the afternoon':\n      hour = 15;\n      meridiem = 1;\n      break;\n    case 'evening':\n    case 'in the evening':\n      hour = 19;\n      meridiem = 1;\n      break;\n    case 'night':\n    case 'at night':\n      hour = 22;\n      meridiem = 1;\n      break;\n  }\n\n  return new chrono.ParsedResult({\n    ref,\n    text: match[0],\n    index: match.index,\n    start: {\n      hour,\n      meridiem,\n    },\n  });\n};\n\n/**\n * When the meridiem is not specified, set the time to after the current time.\n * `at 5 today` (current time is 3pm) => `5pm`.\n */\nconst forwardHoursRefiner = new chrono.Refiner();\nforwardHoursRefiner.refine = (text, results, opt = {}) => {\n  if (opt.forwardHoursOnly !== true) {\n    return results;\n  }\n\n  // If the date is today and there is no AM/PM (meridiem) specified,\n  // let all the time be after the current time.\n  results.forEach((result) => {\n    changeDate(result.start, result.ref);\n    if (result.end) {\n      changeDate(result.end, result.ref);\n    }\n  });\n\n  return results;\n\n  function changeDate(component, ref) {\n    if (!component.isCertain('meridiem')\n      && component.moment(ref).isSame(component, 'day')\n      && component.get('hour') <= ref.getHours()) {\n      component.assign('meridiem', 1);\n      component.assign('hour', component.get('hour') + 12);\n    }\n  }\n};\n\nlet ref = new Date();\nconst customChrono = new chrono.Chrono(chrono.options.casualOption());\ncustomChrono.parsers.push(dayPeriodsParser);\ncustomChrono.refiners.push(forwardHoursRefiner);\n\nexport default {\n  setRef: (newRef) => ref = newRef,\n  parse: (phrase) => customChrono.parse(phrase, ref, {\n    forwardDatesOnly: true,\n    forwardHoursOnly: true,\n  }),\n};\n","import chrono from './chrono/chrono';\n\nconst p = Object.freeze({\n  normaliseTimes: Symbol('normaliseTimes'),\n});\n\n/**\n * Current bugs about time extraction from the original text:\n * * The time expressions starting by \"on\" or \"by\" are not correctly extracted.\n *   e.g. \"The sale on Sunday\" => \"The sale on\" (Incorrect)\n *   e.g. \"The sale at 12p.m.\" => \"The sale\" (Correct)\n *\n * * When a time frame is set, the \"from\" should be extracted too.\n *   e.g. \"I'm busy from Mon to Tue\" => \"I'm busy from\"\n *\n * * When multiple dates are specified, they should all be removed.\n *   e.g. \"I'm busy on Wed and Thurs\" =>\n *        [\"I'm busy on and Thurs\", \"I'm busy on Wed and\"]\n */\nexport default class TimeParser {\n  parse(obj = { cleaned: '' }) {\n    const text = this[p.normaliseTimes](obj.cleaned);\n    const dates = chrono.parse(text);\n\n    if (!dates.length) {\n      obj.time = null;\n      return Promise.resolve(obj);\n    }\n\n    const time = dates.map((date) => {\n      const start = date.start ? Number(date.start.date()) : null;\n      const end = date.end ? Number(date.end.date()) : null;\n      const extractedText = date.text;\n      const processedText = text.substr(0, date.index) +\n        text.substr(date.index + extractedText.length);\n\n      return { start, end, extractedText, processedText };\n    });\n\n    obj.time = time;\n\n    return Promise.resolve(obj);\n  }\n\n  [p.normaliseTimes](text = '') {\n    // The Web Speech API returns PM hours as `p.m.`.\n    return text\n      .replace(/([0-9]) ?p\\.m\\./gi, '$1 PM')\n      .replace(/([0-9]) ?a\\.m\\./gi, '$1 AM');\n  }\n}\n","const PATTERNS = {\n  en: {\n    patterns: [\n      /^Remind (.+?) (?:to|at|on|by|that|about)\\b/i,\n      /^Where (?:am|are|is) (.+?) (?:at|on|by)\\b/i,\n      /^What (?:am|are|is) (.+?) doing\\b/i,\n      /([^ ]+ (?:and|&) [^ ]+)/i, // @todo Improve with more patterns.\n    ],\n    // @see http://www.unicode.org/cldr/charts/29/summary/en.html#6402\n    listBreaker: /,? (?:and|&) |, /gi,\n  },\n\n  fr: {\n    patterns: [\n      /Rappelle (.+?) de (?:.+)/i,\n      /Rappelle (.+?) d'(?:.+)/i,\n      /Rappelle-(.+?) de (?:.+)/i,\n      /Rappelle-(.+?) d'(?:.+)/i,\n    ],\n    listBreaker: /,? (?:et|&) |, /gi,\n  },\n\n  ja: {\n    patterns: [\n      /(?:.+)を(.+)に思い出させて/i,\n      /(.+)に(?:.+)を思い出させて/i,\n      /(.+)は(?:.+)と言うリマインダーを作成して/i,\n    ],\n    listBreaker: new RegExp(`、`, 'gu'),\n  },\n};\n\nconst p = Object.freeze({\n  users: Symbol('users'),\n  normalise: Symbol('normalise'),\n  parseUsers: Symbol('parseUsers'),\n});\n\n// @todo Import and use the list of users when multiusers db is ready.\nexport default class UsersParser {\n  constructor(users = []) {\n    this[p.users] = users;\n  }\n\n  parse(obj = { cleaned: '' }) {\n    const text = obj.cleaned;\n    let users = null;\n\n    PATTERNS.en.patterns.some((pattern) => {\n      const match = pattern.exec(text);\n\n      if (!match) {\n        return false;\n      }\n\n      users = this[p.parseUsers](match[1]);\n      return !!users.length;\n    });\n\n    obj.recipients = users;\n\n    return Promise.resolve(obj);\n  }\n\n  [p.parseUsers](string = '') {\n    return string\n      .split(PATTERNS.en.listBreaker)\n      .map((user) => user.trim())\n      .filter((user) => !!user);\n  }\n}\n","const PATTERNS = {\n  en: {\n    patterns: [\n      /Remind (?:.+?) (?:to|at|on|by|that|about) (.+)/i,\n      /Remind (?:.+?) that (?:it|there) is (.+)/i,\n    ],\n    // @see http://www.unicode.org/cldr/charts/29/summary/en.html#4\n    punctuation: /[-‐–—,;:!?.…'‘’\"“”()[\\]§@*/&#†‡′″]+$/,\n  },\n\n  fr: {\n    patterns: [\n      /Rappelle (?:.+?) de (.+)/i,\n      /Rappelle (?:.+?) d'(.+)/i,\n      /Rappelle-(?:.+?) de (.+)/i,\n      /Rappelle-(?:.+?) d'(.+)/i,\n    ],\n    punctuation: /[-‐–—,;:!?.…’\"“”«»()[\\]§@*/&#†‡]+$/,\n  },\n\n  ja: {\n    patterns: [\n      /(.+)を(?:.+)に思い出させて/i,\n      /(?:.+)に(.+)を思い出させて/i,\n      /(?:.+)は(.+)と言うリマインダーを作成して/i,\n    ],\n    punctuation: new RegExp(\n      `[-‾_＿－‐—―〜・･,，、､;；:：!！?？.．‥…。｡＇‘’\"＂“”(（)）\\\\[［\\\\]］{｛}｝` +\n      `〈〉《》「｢」｣『』【】〔〕‖§¶@＠*＊/／\\＼&＆#＃%％‰†‡′″〃※]+$`, 'u'),\n  },\n};\n\nconst p = Object.freeze({\n  normalise: Symbol('normalise'),\n  parseNoDates: Symbol('parseNoDates'),\n  parseMultipleDates: Symbol('parseMultipleDates'),\n});\n\nexport default class ActionParser {\n  parse(obj = { cleaned: '', time: [] }) {\n    let action = null;\n\n    if (obj.time === null) {\n      // We use the original phrase.\n      const text = this[p.normalise](obj.cleaned);\n      action = this[p.parseNoDates](text);\n    } else if (obj.time.length === 1) {\n      // We use the original phrase with the time extracted out.\n      const text = this[p.normalise](obj.time[0].processedText);\n      action = this[p.parseNoDates](text);\n    } else if (obj.time.length > 1) {\n      const text = this[p.normalise](obj.cleaned);\n      action = this[p.parseMultipleDates](text);\n    }\n\n    obj.action = action;\n\n    return Promise.resolve(obj);\n  }\n\n  [p.normalise](string = '') {\n    return string\n    // Strip punctuations.\n      .replace(PATTERNS.en.punctuation, '')\n      .trim();\n  }\n\n  [p.parseNoDates](text = '') {\n    let action = null;\n\n    PATTERNS.en.patterns.some((pattern) => {\n      const match = pattern.exec(text);\n\n      if (!match) {\n        return false;\n      }\n\n      action = match[1];\n      return true;\n    });\n\n    return action;\n  }\n\n  [p.parseMultipleDates]() {\n    // @todo Implement me.\n    console.error('Parsing action with multiple time references is not ' +\n      'implemented yet.');\n    return null;\n  }\n}\n","import moment from 'moment';\nimport TwitterCldr from 'twitter_cldr';\n\n/*\n * @todo:\n *   * @see http://www.unicode.org/cldr/charts/29/verify/dates/en.html\n *     for formatting the time of the day.\n */\n\nconst p = Object.freeze({\n  // Properties\n  listFormatter: Symbol('listFormatter'),\n\n  // Methods\n  getLocalised: Symbol('getLocalised'),\n  formatUser: Symbol('formatUser'),\n  formatAction: Symbol('formatAction'),\n  formatTime: Symbol('formatTime'),\n  isToday: Symbol('isToday'),\n  isTomorrow: Symbol('isTomorrow'),\n  isThisMonth: Symbol('isThisMonth'),\n  formatHoursAndMinutes: Symbol('formatHoursAndMinutes'),\n});\n\nconst DEFAULT_LOCALE = 'en';\nconst PATTERNS = {\n  en: {\n    template: `OK, I'll remind [users] [action] [time].`,\n    formatUser: (user) => user\n      .replace(/\\bme\\b/gi, 'you')\n      .replace(/\\bI am\\b/gi, 'you are')\n      .replace(/\\bI have\\b/gi, 'you have')\n      .replace(/\\bI will\\b/gi, 'you will')\n      .replace(/\\bI\\b/gi, 'you')\n      .replace(/\\bmy\\b/gi, 'your')\n      .replace(/\\bmine\\b/gi, 'yours'),\n  },\n  fr: {\n    template: `OK, je rappelerai [users] [action] [time].`,\n    formatUser: (user) => user,\n  },\n  ja: {\n    template: `承知しました。[time][users]に[action]をリマインドします。`,\n    formatUser: (user) => user,\n  },\n};\n\nexport default class ReminderConfirmation {\n  constructor(locale = DEFAULT_LOCALE) {\n    this.locale = locale;\n\n    const cldr = TwitterCldr.load(locale);\n    this[p.listFormatter] = new cldr.ListFormatter();\n  }\n\n  /**\n   * Generate a phrase to be spoken to confirm a reminder.\n   *\n   * @param {Object} reminder\n   * @return {string}\n   */\n  confirm(reminder) {\n    const template = this[p.getLocalised]('template');\n    const data = {\n      users: this[p.formatUser](reminder),\n      action: this[p.formatAction](reminder),\n      time: this[p.formatTime](reminder),\n    };\n\n    return template.replace(/\\[([^\\]]+)\\]/g, (match, placeholder) => {\n      return data[placeholder];\n    });\n  }\n\n  /**\n   * Given a property of the PATTERNS object, returns the one matching the\n   * current locale or the default one if non existing.\n   *\n   * @param {string} prop\n   * @returns {*}\n   */\n  [p.getLocalised](prop) {\n    let locale = this.locale;\n    if (!PATTERNS[this.locale] || !PATTERNS[this.locale][prop]) {\n      locale = DEFAULT_LOCALE;\n    }\n\n    return PATTERNS[locale][prop];\n  }\n\n  [p.formatUser](reminder) {\n    const { recipients } = reminder;\n    const formatUser = this[p.getLocalised]('formatUser');\n    const formattedRecipients = recipients.map(formatUser);\n    return this[p.listFormatter].format(formattedRecipients);\n  }\n\n  [p.formatAction](reminder) {\n    const { action, cleaned } = reminder;\n    const formatUser = this[p.getLocalised]('formatUser');\n    const formattedAction = formatUser(action);\n\n    const PATTERN1 = new RegExp(`\\\\bthat ${action}`, 'iu');\n    const PATTERN2 = new RegExp(`\\\\bit is ${action}`, 'iu');\n    const PATTERN3 = new RegExp(`\\\\bthere is ${action}`, 'iu');\n    const PATTERN4 = new RegExp(`\\\\babout ${action}`, 'iu');\n\n    if (PATTERN1.test(cleaned)) {\n      return `that ${formattedAction}`;\n    } else if (PATTERN2.test(cleaned)) {\n      return `that it is ${formattedAction}`;\n    } else if (PATTERN3.test(cleaned)) {\n      return `that there is ${formattedAction}`;\n    } else if (PATTERN4.test(cleaned)) {\n      return `about ${formattedAction}`;\n    }\n\n    return `to ${formattedAction}`;\n  }\n\n  [p.formatTime](reminder) {\n    const { due } = reminder;\n\n    if (this[p.isToday](due)) {\n      const hour = this[p.formatHoursAndMinutes](due);\n      return `at ${hour} today`;\n    } else if (this[p.isTomorrow](due)) {\n      const hour = this[p.formatHoursAndMinutes](due);\n      return `at ${hour} tomorrow`;\n    } else if (this[p.isThisMonth](due)) {\n      return moment(due).format('[on the] Do');\n    }\n\n    return moment(due).format('[on] MMMM [the] Do');\n  }\n\n  [p.isToday](date) {\n    const today = moment().startOf('day');\n    const tomorrow = moment().add(1, 'day').startOf('day');\n    return moment(date).isBetween(today, tomorrow);\n  }\n\n  [p.isTomorrow](date) {\n    const tomorrow = moment().add(1, 'day').startOf('day');\n    const in2days = moment().add(2, 'day').startOf('day');\n    return moment(date).isBetween(tomorrow, in2days);\n  }\n\n  [p.isThisMonth](date) {\n    const thisMonth = moment().startOf('month');\n    const nextMonth = moment().add(1, 'month').startOf('month');\n    return moment(date).isBetween(thisMonth, nextMonth);\n  }\n\n  /**\n   * Return a string from a date suitable for speech synthesis.\n   *\n   * @param {Date} date\n   * @return {string}\n   */\n  [p.formatHoursAndMinutes](date) {\n    date = moment(date);\n    let format;\n\n    if (date.minute() === 0) {\n      format = date.format('h A'); // 7 PM\n    } else if (date.minute() === 15) {\n      format = date.format('[quarter past] h A');\n    } else if (date.minute() === 30) {\n      format = date.format('[half past] h A');\n    } else if (date.minute() === 45) {\n      const nextHour = date.add(1, 'hour');\n      format = nextHour.format('[quarter to] h A');\n    } else {\n      format = date.format('h m A'); // 6 24 AM\n    }\n\n    // Some speech synthesisers pronounce \"AM\" as in \"ham\" (not \"A. M.\").\n    return format\n      .replace(/([0-9]) ?AM$/gi, '$1 A.M.')\n      .replace(/([0-9]) ?PM$/gi, '$1 P.M.');\n  }\n}\n","import ReminderConfirmation from './confirmations/reminder-confirmation';\n\nconst p = Object.freeze({\n  reminderConfirmation: Symbol('reminderConfirmation'),\n});\n\nexport default class ReminderRefiner {\n  constructor() {\n    this[p.reminderConfirmation] = new ReminderConfirmation();\n  }\n\n  /**\n   * A reminder is an intent that:\n   *  * Starts with \"Remind\"\n   *  * Has a single time reference\n   *  * Has at least 1 user\n   *  * Has an action\n   *\n   * @param {Object} obj\n   * @returns {Promise}\n   */\n  refine(obj = {}) {\n    const hasTime = obj.time !== null\n      && obj.time.length === 1\n      && obj.time[0].start !== null\n      && obj.time[0].end === null;\n    const hasUsers = obj.recipients !== null\n      && obj.recipients.length > 0;\n    const hasAction = obj.action !== null;\n\n    if (obj.cleaned.toLowerCase().startsWith('remind')\n      && hasTime\n      && hasUsers\n      && hasAction) {\n      obj.due = obj.time[0].start;\n      obj.confirmation = this[p.reminderConfirmation].confirm(obj);\n      obj.intent = 'reminder';\n    }\n\n    return Promise.resolve(obj);\n  }\n}\n","// @todo Handle the case where a time range is specified.\nexport default class QueryRefiner {\n  /**\n   * A query is an intent that:\n   *  * Looks like a question\n   *  * Has a single time reference\n   *  * Has at least 1 user\n   *  * Has no actions\n   *\n   * @param {Object} obj\n   * @returns {Promise}\n   */\n  refine(obj = {}) {\n    const hasTime = obj.time !== null\n      && obj.time.length === 1\n      && obj.time[0].start !== null\n      && obj.time[0].end === null;\n    const hasUsers = obj.recipients !== null\n      && obj.recipients.length > 0;\n    const hasNoActions = obj.action === null;\n\n    if (obj.cleaned.match(/^(?:What|Where)/i)\n      && hasTime\n      && hasUsers\n      && hasNoActions) {\n      obj.due = obj.time[0].start;\n      obj.intent = 'query';\n    }\n\n    return Promise.resolve(obj);\n  }\n}\n","import NormaliseCleaner from './cleaners/normalise-cleaner';\nimport ContractionsCleaner from './cleaners/contractions-cleaner';\nimport SalutationsCleaner from './cleaners/salutations-cleaner';\nimport PolitenessCleaner from './cleaners/politeness-cleaner';\n\nimport TimeParser from './parsers/time-parser';\nimport UsersParser from './parsers/users-parser';\nimport ActionParser from './parsers/action-parser';\n\nimport ReminderRefiner from './refiners/reminder-refiner';\nimport QueryRefiner from './refiners/query-refiner';\n\nconst p = Object.freeze({\n  // Properties\n  cleaners: Symbol('cleaners'),\n  parsers: Symbol('parsers'),\n  refiners: Symbol('refiners'),\n});\n\nexport default class IntentParser {\n  constructor() {\n    this[p.cleaners] = [\n      new NormaliseCleaner(), // Always keep this one first.\n      new ContractionsCleaner(),\n      new SalutationsCleaner(),\n      new PolitenessCleaner(),\n    ];\n    this[p.parsers] = [\n      new TimeParser(),\n      new UsersParser(),\n      new ActionParser(),\n    ];\n    this[p.refiners] = [\n      new ReminderRefiner(),\n      new QueryRefiner(),\n    ];\n\n    // Add it to the global scope for debugging.\n    const global = new Function('return this')();\n    global.intentParser = this;\n  }\n\n  parse(text = '') {\n    text = String(text);\n\n    const result = {\n      raw: text, // Leave this untouched for debugging purposes.\n      intent: null,\n    };\n\n    const cleaningPromises = this[p.cleaners]\n      .map((cleaner) => cleaner.clean.bind(cleaner));\n    const parsingPromises = this[p.parsers]\n      .map((parser) => parser.parse.bind(parser));\n    const refiningPromises = this[p.refiners]\n      .map((refiner) => refiner.refine.bind(refiner));\n\n    return new Promise((resolve, reject) => {\n      Promise.resolve(result)\n      // Cleaning phase.\n        .then((result) => cleaningPromises\n          .reduce((p, val) => p.then(val), Promise.resolve(result)))\n\n        // Parsing phase.\n        .then((result) => parsingPromises\n          .reduce((p, val) => p.then(val), Promise.resolve(result)))\n\n        // Refining phase.\n        .then((result) => refiningPromises\n          .reduce((p, val) => p.then(val), Promise.resolve(result))\n        )\n\n        // Final result.\n        .then((result) => {\n          if (result.intent === null) {\n            console.error('The intent could not be parsed:', result);\n            return reject(null);\n          }\n\n          return resolve(result);\n        });\n    });\n  }\n}\n"],"names":["NormaliseCleaner","clean","obj","raw","text","replace","trim","cleaned","Promise","resolve","ContractionsCleaner","RegExp","PUNCTUATION","SalutationsCleaner","en","PolitenessCleaner","match","dayPeriodsParser","chrono","Parser","pattern","extract","ref","hour","meridiem","toLowerCase","ParsedResult","index","forwardHoursRefiner","Refiner","refine","results","opt","forwardHoursOnly","forEach","result","start","end","changeDate","component","isCertain","moment","isSame","get","getHours","assign","Date","customChrono","Chrono","options","casualOption","parsers","push","refiners","newRef","phrase","parse","p","Object","freeze","Symbol","TimeParser","normaliseTimes","dates","length","time","map","date","Number","extractedText","processedText","substr","PATTERNS","UsersParser","users","patterns","some","exec","parseUsers","recipients","string","split","listBreaker","user","filter","ActionParser","action","normalise","parseNoDates","parseMultipleDates","punctuation","error","DEFAULT_LOCALE","ReminderConfirmation","locale","cldr","TwitterCldr","load","listFormatter","ListFormatter","confirm","reminder","template","getLocalised","data","formatUser","formatAction","formatTime","placeholder","prop","formattedRecipients","format","formattedAction","PATTERN1","PATTERN2","PATTERN3","PATTERN4","test","due","isToday","formatHoursAndMinutes","isTomorrow","isThisMonth","today","startOf","tomorrow","add","isBetween","in2days","thisMonth","nextMonth","minute","nextHour","ReminderRefiner","reminderConfirmation","hasTime","hasUsers","hasAction","startsWith","confirmation","intent","QueryRefiner","hasNoActions","IntentParser","cleaners","global","Function","intentParser","String","cleaningPromises","cleaner","bind","parsingPromises","parser","refiningPromises","refiner","reject","then","reduce","val"],"mappings":"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"}